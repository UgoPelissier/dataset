load"gmsh"
load "iovtk"
load "mshmet"
load "medit"

// Iterations
int n = 500;
int count = 0;

// Physical labels
int inflow = 2;
int outflow = 3;
int walls = 4;
int obstacle = 5;

// Parameters
real nu = 1.0/400.0;

func string typoTitleCircle(int count){
    /*
    Return the title of the file containing the circle's parameters
    */
    string title;
    if (count<10){
            title = "../circles/circle_00" + count + ".txt";
        }
    else if (count<100) {
        title = "../circles/circle_0" + count + ".txt";
    }
    else {
        title = "../circles/circle_" + count + ".txt";
    }
    return title;
}

func string typoTitleMesh(int count){
    /*
    Return the title of the file containing the mesh
    */
    string title;
    if (count<10){
            title = "mesh/cad_00" + count + ".msh2";
        }
    else if (count<100) {
        title = "mesh/cad_0" + count + ".msh2";
    }
    else {
        title = "mesh/cad_" + count + ".msh2";
    }
    return title;
}

func string typoTitleVtu(int count){
    /*
    Return the title of the file containing the vtu
    */
    string title;
    if (count<10){
            title = "vtu/cad_00" + count + ".vtu";
        }
    else if (count<100) {
        title = "vtu/cad_0" + count + ".vtu";
    }
    else {
        title = "vtu/cad_" + count + ".vtu";
    }
    return title;
}

func string typoTitleSol(int count){
    /*
    Return the title of the file containing the sol
    */
    string title;
    if (count<10){
            title = "sol/cad_00" + count + ".sol";
        }
    else if (count<100) {
        title = "sol/cad_0" + count + ".sol";
    }
    else {
        title = "sol/cad_" + count + ".sol";
    }
    return title;
}

while (count < n){
	cout << "Iter: " << count+1 << "/" << n << endl;

	mesh Th = gmshload(typoTitleMesh(count));

	//Fespace
	fespace Uh(Th, [P2, P2]);
	Uh [ux, uy];
	Uh [vx, vy];

	fespace Ph(Th, P1);
	Ph p;
	Ph q;
	Ph metric;

	//Macro
	macro grad(u) [dx(u), dy(u)] //
	macro div(ux, uy) (dx(ux) + dy(uy)) //

	//Problem
	problem Stokes ([ux, uy, p],[vx, vy, q])
		= int2d(Th)(
			nu * (
				grad(ux)' * grad(vx)
				+ grad(uy)' * grad(vy)
			)
			- p * div(vx, vy)
			- q* div(ux, uy)
		)
		+ on(inflow, ux=1., uy=0.)
		+ on(walls, uy=0.)
		+ on(obstacle, ux=0., uy=0.)
		;

	Stokes;

	savevtk(typoTitleVtu(count), Th, ux, uy, p, dataname="u v p", bin=false);

	count++;
}